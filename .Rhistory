plot(res$estimates_adjust$pi_red[, 1], type = "l", ylim = c(0, 1))
}
res_plots(res = res_no_varadj_cc_dbh)
?plot_pattern_profiles
item_labels <- colnames(prospect_dbh)
item_labels <- colnames(prospect_dbh)[-1]
item_labels <- colnames(prospect_dbh)[-1]
class_title <- "Dietary Behavior Pattern"
# Display plots of results
res_plots <- function(res) {
print(baysc::plot_pattern_profiles(res, item_labels = item_labels,
class_title = class_title,
categ_title = categ_title,
categ_labels = categ_labels))
print(baysc::plot_pattern_probs(res))
print(baysc::plot_class_dist(res))
# Traceplot for pi
plot(res$estimates_adjust$pi_red[, 1], type = "l", ylim = c(0, 1))
}
res_plots(res = res_no_varadj_cc_dbh)
print(baysc::plot_pattern_profiles(res, item_labels = item_labels,
class_title = class_title,
categ_title = categ_title,
categ_labels = categ_labels))
item_labels <- colnames(prospect_dbh)[-1]
class_title <- "Dietary Behavior Pattern"
categ_title <- "Risk Level"
categ_labels <- c("Low", "Med", "High")
print(baysc::plot_pattern_profiles(res, item_labels = item_labels,
class_title = class_title,
categ_title = categ_title,
categ_labels = categ_labels))
# Display plots of results
res_plots <- function(res) {
print(baysc::plot_pattern_profiles(res, item_labels = item_labels,
class_title = class_title,
categ_title = categ_title,
categ_labels = categ_labels))
print(baysc::plot_pattern_probs(res))
print(baysc::plot_class_dist(res))
# Traceplot for pi
plot(res$estimates_adjust$pi_red[, 1], type = "l", ylim = c(0, 1))
}
save_path <- paste0(wd, res_dir, "unwt_cc_dbh")
load(paste0(save_path, "_wolca_results.RData"))
res_unwt <- res
res_plots(res = res_unwt)
save_path <- paste0(wd, res_dir, "agePRCS_no_varadj_cc_dbh")
load(paste0(save_path, "_wolcan_results.RData"))
load(paste0(save_path, "_wolcan_results.RData"))
res_agePRCS <- res
res_plots(res = res_agePRCS)
res_agePRCS$estimates_adjust$K_red_draws_all
boxplot(res_unwt$estimates$pi_red)
save_path <- paste0(wd, res_dir, "agePRCS_unwt_cc_dbh")
load(paste0(save_path, "_wolca_results.RData"))
res_agePRCS_unwt <- res
res_plots(res = res_agePRCS_unwt)
save_path <- paste0(wd, res_dir, "cutoff_agePRCS_no_varadj_cc_dbh")
load(paste0(save_path, "_wolcan_results.RData"))
res_cutoff_agePRCS <- res
res_plots(res = res_cutoff_agePRCS)
res_cutoff_agePRCS$estimates_adjust$K_red_draws_all
plot(res_agePRCS$estimates_adjust$dendrogram)
### Unweighted logistic regression
regr_dat <- as.data.frame(cbind(
restrict_data,
dbh_class = factor(res_unwt$estimates$c_all)))
library(tidyverse)  # data wrangling
library(readxl)     # read excel files
library(mice)       # missingness pattern
library(BART)  # BART
library(survey)  # survey functions
library(parallel)  # parallel processing
library(abind)
library(baysc)
# Directories
wd <- "~/Documents/GitHub/WOLCAN/"  # Working directory
# wd <- "/n/holyscratch01/stephenson_lab/Users/stephwu18/WOLCAN/"
data_dir <- "Application/Cleaned_Data/"  # Data directory
res_dir <- "Application/Results/"        # Results directory
code_dir <- "Application/Code/"  # Code directory
# Read in PRCS data
prcs_cleaned <- read.csv(paste0(wd, data_dir, "prcs_cleaned.csv"))
# Restrict to ages 30 to 75
prcs_cleaned <- prcs_cleaned %>% filter(Age >= 30 & Age < 76)
# Drop NA: from 79858 to 77907 (1951 removed)
prcs_drop_na <- prcs_cleaned %>% drop_na()
# Read in PROSPECT data
prospect_cleaned <- read.csv(paste0(wd, data_dir, "prospect_cleaned.csv"))
# Drop NA: from 1690 to 1018 (672 removed)
prospect_drop_na <- prospect_cleaned %>% drop_na()
# Plot missingness pattern
sort(apply(prospect_cleaned, 2, function(x) sum(is.na(x))), decreasing = TRUE)
test <- md.pattern(prospect_cleaned, rotate.names = TRUE)
# REMEMBER TO RELEVEL DEPENDING ON NECESSARY REFERENCE
# Social_support = factor(case_when(  # CHECK THIS!!!!!
#   SS_SCORE <= 18 ~ 0, # low support
#   SS_SCORE >= 19 ~ 1, # high support (reference)
# ), levels = c(1, 0)),
# Perceived_stress = factor(case_when(  # CHECK THIS!!!
#   PSS_SCORE <= 28 ~ 0, # low stress (reference)
#   PSS_SCORE >= 29 ~ 1, # high stress
# ), levels = c(0, 1)),
# Only the dietary behavior variables
prospect_dbh <- prospect_cleaned %>%
select(studyid, purchase_person:eat_vegetarian)
# %>%mutate_all(as.factor)
# Drop NA: from 1690 to 1544 (146 removed)
prospect_dbh_drop_na <- prospect_dbh %>% drop_na()
#==================== Run WOLCAN removing missing DBH ==========================
# Restrict to DBH complete cases
restrict_data <- prospect_cleaned %>%
filter(studyid %in% prospect_dbh_drop_na$studyid)
### Unweighted logistic regression
regr_dat <- as.data.frame(cbind(
restrict_data,
dbh_class = factor(res_unwt$estimates$c_all)))
summary(glm(hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban,
data = regr_dat, family = binomial()))
### Survey-weighted logistic regression
wtd_logreg <- function(res, data, formula_y) {
svy_data <- data.frame(dbh_class = res$estimates_adjust$c_all,
restrict_data,
wts = res$estimates_adjust$weights)
svy_des <- survey::svydesign(ids = ~1, weights = ~wts, data = svy_data)
log_reg <- survey::svyglm(formula = as.formula(formula_y),
design = svy_des,
family = stats::quasibinomial(link = "logit"))
return(summary(log_reg))
}
load(paste0(wd, res_dir, "no_varadj_cc_dbh", "_wolcan_results.RData"))
res_no_varadj_cc_dbh <- res
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
res_no_varadj_cc_dbh$estimates_adjust$c_all
### Survey-weighted logistic regression
wtd_logreg <- function(res, data, formula_y) {
svy_data <- data.frame(dbh_class = res$estimates_adjust$c_all,
restrict_data,
wts = res$data_vars$sampling_wt)
svy_des <- survey::svydesign(ids = ~1, weights = ~wts, data = svy_data)
log_reg <- survey::svyglm(formula = as.formula(formula_y),
design = svy_des,
family = stats::quasibinomial(link = "logit"))
return(summary(log_reg))
}
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
log_reg <- survey::svyglm(formula = as.formula(formula_y),
design = svy_des,
family = stats::binomial(link = "logit"))
### Survey-weighted logistic regression
wtd_logreg <- function(res, data, formula_y) {
svy_data <- data.frame(dbh_class = res$estimates_adjust$c_all,
restrict_data,
wts = res$data_vars$sampling_wt)
svy_des <- survey::svydesign(ids = ~1, weights = ~wts, data = svy_data)
log_reg <- survey::svyglm(formula = as.formula(formula_y),
design = svy_des,
family = stats::binomial(link = "logit"))
return(summary(log_reg))
}
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
### Survey-weighted logistic regression
wtd_logreg <- function(res, data, formula_y) {
svy_data <- data.frame(dbh_class = res$estimates_adjust$c_all,
restrict_data,
wts = res$data_vars$sampling_wt)
svy_des <- survey::svydesign(ids = ~1, weights = ~wts, data = svy_data)
log_reg <- survey::svyglm(formula = as.formula(formula_y),
design = svy_des,
family = stats::quasibinomial(link = "logit"))
return(summary(log_reg))
}
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
### Survey-weighted logistic regression
wtd_logreg <- function(res, data, formula_y) {
svy_data <- data.frame(dbh_class = as.factor(res$estimates_adjust$c_all),
restrict_data,
wts = res$data_vars$sampling_wt)
svy_des <- survey::svydesign(ids = ~1, weights = ~wts, data = svy_data)
log_reg <- survey::svyglm(formula = as.formula(formula_y),
design = svy_des,
family = stats::quasibinomial(link = "logit"))
return(summary(log_reg))
}
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
wtd_logreg(res = res_agePRCS, data = restrict_data,
formula_y = "hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
wtd_logreg(res = res_cutoff_agePRCS, data = restrict_data,
formula_y = "hypertension ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
hist(res$data_vars$sampling_wt)
hist(res$data_vars$sampling_wt, freq = FALSE)
hist(res$data_vars$sampling_wt, breaks = 30)
# Display plots of results
res_plots <- function(res) {
print(baysc::plot_pattern_profiles(res, item_labels = item_labels,
class_title = class_title,
categ_title = categ_title,
categ_labels = categ_labels))
print(baysc::plot_pattern_probs(res))
print(baysc::plot_class_dist(res))
# Traceplot for pi
plot(res$estimates_adjust$pi_red[, 1], type = "l", ylim = c(0, 1))
hist(res$data_vars$sampling_wt, breaks = 30)
}
hist(res_no_varadj_cc_dbh$data_vars$sampling_wt, breaks = 30)
hist(res_agePRCS$data_vars$sampling_wt, breaks = 30)
hist(res_cutoff_agePRCS$data_vars$sampling_wt, breaks = 30)
hist(res_unwt$data_vars$sampling_wt, breaks = 30)
colnames(restrict_data)
cov_df <- restrict_data %>%
select(Sex, Educ, Age, Inc_hh, Urban, Ethnicity, Smoking_status,
Drinking_status, Food_security, WIC_SNAP, Social_support,
Perceived_stress, Depression, Anxiety)
baysc::vars_across_class(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1,
col_props = TRUE, res = res_no_varadj_cc_dbh)
baysc::vars_across_class(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(x_mat),
col_props = TRUE, res = res_no_varadj_cc_dbh)
baysc::vars_across_class(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
col_props = TRUE, res = res_no_varadj_cc_dbh)
baysc::vars_across_class(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
stratum_id = 1,
col_props = TRUE, res = res_no_varadj_cc_dbh)
baysc::vars_across_class(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
stratum_id = rep(1:nrow(restrict_data)),
col_props = TRUE, res = res_no_varadj_cc_dbh)
baysc::vars_across_class(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
stratum_id = rep(1, nrow(restrict_data)),
col_props = TRUE, res = res_no_varadj_cc_dbh)
?svymean
?svyby
vars_across_class_temp <- function (c_all, cov_df, sampling_wt, stratum_id, cluster_id,
digits = 1, col_props = TRUE, res)
{
if (!is.factor(c_all)) {
stop("c_all must be a factor")
}
if (!(inherits(res, c("swolca", "wolca")))) {
stop("res must be an object of class `swolca` or `wolca`, resulting \n         from a call to one of these functions")
}
var_names <- colnames(cov_df)
var_levels_list <- sapply(var_names, function(x) get_levels(df = cov_df,
var = x))
cont_vars <- which(sapply(cov_df, function(x) !is.factor(x)))
num_rows <- length(unlist(sapply(cov_df, levels))) + length(cont_vars) +
2
num_cols <- length(levels(c_all)) + 3
svy_design <- survey::svydesign(id = ~cluster_id, weights = ~sampling_wt,
strata = ~stratum_id, data = data.frame(cov_df, Class = c_all))
output_df <- as.data.frame(matrix(NA, nrow = num_rows, ncol = num_cols))
colnames(output_df) <- c("Variable", "Level", levels(c_all),
"Overall")
output_df[, 1] <- c("N: % (posterior SD %)", "n: %", unlist(sapply(1:length(var_names),
function(x) if (x %in% cont_vars) {
c(paste0(var_names[x], ": Mean"))
} else {
c(paste0(var_names[x], ": %"), rep("", length(var_levels_list[[x]]) -
1))
})))
output_df[, 2] <- c("", "", unlist(var_levels_list))
output_df[1, -c(1, 2)] <- unlist(get_cov_props_temp(svy_design = svy_design,
cov = "population", var_levels = "", res = res, digits = digits))
output_df[2, -c(1, 2)] <- unlist(get_cov_props_temp(svy_design = svy_design,
cov = "sample", var_levels = "", digits = digits))
row <- 2
for (i in 1:length(var_names)) {
var_levels <- var_levels_list[[i]]
output_df[row + 1:length(var_levels), -c(1, 2)] <- unlist(get_cov_props_temp(svy_design = svy_design,
cov = var_names[i], var_levels = var_levels, digits = digits,
col_props = col_props))
row <- row + length(var_levels)
}
return(output_df)
}
get_cov_props_temp <- function (svy_design, cov, var_levels, col_props = TRUE, res = NULL,
digits = 1)
{
if (!is.null(res)) {
if (!(inherits(res, c("swolca", "wolca")))) {
stop("res must be NULL or an object of class `swolca` or `wolca`, resulting \n         from a call to one of these functions")
}
}
n_levels <- length(var_levels)
n_cols <- length(table(svy_design$variables$Class)) + 1
output <- as.data.frame(matrix(NA, nrow = n_levels, ncol = n_cols))
colnames(output) <- c(paste0("Pattern", 1:(n_cols - 1)),
"Total")
if (cov == "sample") {
temp_tot <- length(svy_design$variables$Class)
temp_class <- table(svy_design$variables$Class)
output[, n_cols] <- ""
output[, -n_cols] <- format(round(temp_class/temp_tot *
100, digits), nsmall = digits)
}
else if (cov == "population") {
output[, n_cols] <- ""
if (!is.null(res$estimates_adjust)) {
output[, -n_cols] <- unlist(apply(res$estimates_adjust$pi_red,
2, function(x) paste0(format(round(mean(x, na.rm = TRUE) *
100, digits), nsmall = digits), " (", format(round(stats::sd(x, na.rm = TRUE) *
100, digits), nsmall = digits), ")")))
}
else {
output[, -n_cols] <- unlist(apply(res$estimates$pi_red,
2, function(x) paste0(format(round(mean(x, na.rm = TRUE) *
100, digits), nsmall = digits), " (", format(round(stats::sd(x, na.rm = TRUE) *
100, digits), nsmall = digits), ")")))
}
}
else if (!is.factor(svy_design$variables[[cov]])) {
temp_tot <- as.data.frame(survey::svymean(stats::as.formula(paste0("~",
cov)), svy_design, na.rm = TRUE))
temp_class <- as.data.frame(survey::svyby(stats::as.formula(paste0("~",
cov)), ~Class, svy_design, function(x) survey::svymean(x, na.rm = TRUE)))
output[, n_cols] <- format(round(temp_tot$mean, digits),
nsmall = digits)
output[, -n_cols] <- sapply(1:(n_cols - 1), function(x) format(round(temp_class[x,
1 + 1:n_levels], digits), nsmall = digits))
}
else {
if (col_props) {
temp_tot <- as.data.frame(survey::svymean(stats::as.formula(paste0("~",
cov)), svy_design, na.rm = TRUE))
temp_class <- as.data.frame(survey::svyby(stats::as.formula(paste0("~",
cov)), ~Class, svy_design, function(x) survey::svymean(x, na.rm = TRUE)))
output[, n_cols] <- format(round(temp_tot$mean *
100, digits), nsmall = digits)
output[, -n_cols] <- as.data.frame(sapply(1:(n_cols -
1), function(x) format(round(temp_class[x, 1 +
1:n_levels] * 100, digits), nsmall = digits)))
}
else {
temp_class <- as.data.frame(survey::svyby(~Class,
stats::as.formula(paste0("~", cov)), svy_design,
function(x) survey::svymean(x, na.rm = TRUE)))
output[, n_cols] <- 100
output[, -n_cols] <- format(round(temp_class[1:n_levels,
2:n_cols] * 100, digits), nsmall = digits)
}
}
return(output)
}
vars_across_class_temp(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
stratum_id = rep(1, nrow(restrict_data)),
col_props = TRUE, res = res_no_varadj_cc_dbh)
get_cov_props_temp <- function (svy_design, cov, var_levels, col_props = TRUE, res = NULL,
digits = 1)
{
if (!is.null(res)) {
if (!(inherits(res, c("swolca", "wolca")))) {
stop("res must be NULL or an object of class `swolca` or `wolca`, resulting \n         from a call to one of these functions")
}
}
n_levels <- length(var_levels)
n_cols <- length(table(svy_design$variables$Class)) + 1
output <- as.data.frame(matrix(NA, nrow = n_levels, ncol = n_cols))
colnames(output) <- c(paste0("Pattern", 1:(n_cols - 1)),
"Total")
if (cov == "sample") {
temp_tot <- length(svy_design$variables$Class)
temp_class <- table(svy_design$variables$Class)
output[, n_cols] <- ""
output[, -n_cols] <- format(round(temp_class/temp_tot *
100, digits), nsmall = digits)
}
else if (cov == "population") {
output[, n_cols] <- ""
if (!is.null(res$estimates_adjust)) {
output[, -n_cols] <- unlist(apply(res$estimates_adjust$pi_red,
2, function(x) paste0(format(round(mean(x, na.rm = TRUE) *
100, digits), nsmall = digits), " (", format(round(stats::sd(x, na.rm = TRUE) *
100, digits), nsmall = digits), ")")))
}
else {
output[, -n_cols] <- unlist(apply(res$estimates$pi_red,
2, function(x) paste0(format(round(mean(x, na.rm = TRUE) *
100, digits), nsmall = digits), " (", format(round(stats::sd(x, na.rm = TRUE) *
100, digits), nsmall = digits), ")")))
}
}
else if (!is.factor(svy_design$variables[[cov]])) {
temp_tot <- as.data.frame(survey::svymean(stats::as.formula(paste0("~",
cov)), svy_design, na.rm = TRUE))
temp_class <- as.data.frame(survey::svyby(stats::as.formula(paste0("~",
cov)), ~Class, svy_design, survey::svymean, na.rm = TRUE))
output[, n_cols] <- format(round(temp_tot$mean, digits),
nsmall = digits)
output[, -n_cols] <- sapply(1:(n_cols - 1), function(x) format(round(temp_class[x,
1 + 1:n_levels], digits), nsmall = digits))
}
else {
if (col_props) {
temp_tot <- as.data.frame(survey::svymean(stats::as.formula(paste0("~",
cov)), svy_design, na.rm = TRUE))
temp_class <- as.data.frame(survey::svyby(stats::as.formula(paste0("~",
cov)), ~Class, svy_design, survey::svymean, na.rm = TRUE))
output[, n_cols] <- format(round(temp_tot$mean *
100, digits), nsmall = digits)
output[, -n_cols] <- as.data.frame(sapply(1:(n_cols -
1), function(x) format(round(temp_class[x, 1 +
1:n_levels] * 100, digits), nsmall = digits)))
}
else {
temp_class <- as.data.frame(survey::svyby(~Class,
stats::as.formula(paste0("~", cov)), svy_design,
survey::svymean, na.rm = TRUE))
output[, n_cols] <- 100
output[, -n_cols] <- format(round(temp_class[1:n_levels,
2:n_cols] * 100, digits), nsmall = digits)
}
}
return(output)
}
vars_across_class_temp(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
stratum_id = rep(1, nrow(restrict_data)),
col_props = TRUE, res = res_no_varadj_cc_dbh)
summary(cov_df)
cov_df <- restrict_data %>%
select(Sex, Educ, Age, Inc_hh, Urban, Ethnicity, Smoking_status,
Drinking_status, Food_security, WIC_SNAP, Social_support,
Perceived_stress, Depression, Anxiety) %>%
mutate_at(c("Educ", "Inc_hh", "Smoking_status", "Drinking_status"), as.factor)
vars_across_class_temp(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
stratum_id = rep(1, nrow(restrict_data)),
col_props = TRUE, res = res_no_varadj_cc_dbh)
knitr::kable(vars_across_class_temp(c_all = as.factor(res_no_varadj_cc_dbh$estimates_adjust$c_all),
cov_df = cov_df,
sampling_wt = res_no_varadj_cc_dbh$data_vars$sampling_wt,
digits = 1, cluster_id = 1:nrow(restrict_data),
stratum_id = rep(1, nrow(restrict_data)),
col_props = TRUE, res = res_no_varadj_cc_dbh))
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "diabetes ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "cholesterol ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
wtd_logreg(res = res_no_varadj_cc_dbh, data = restrict_data,
formula_y = "high_cholesterol ~ dbh_class + Age + Sex + Educ + Inc_hh + Urban")
table(cov_df$Educ)
table(cov_df$Ethnicity)
res_plots(res = res_no_varadj_cc_dbh)
res <- res_no_varadj_cc_dbh
print(baysc::plot_pattern_probs(res, item_labels = item_labels,
class_title = class_title,
categ_title = categ_title,
categ_labels = categ_labels))
baysc::plot_class_dist(res = res_unwt)
res <- res_unwt
if (!(class(res) %in% c("swolca", "wolca"))) {
stop("res must be an object of class `swolca` or `wolca`, resulting \n         from a call to one of these functions")
}
pi_red <- as.data.frame(res$estimates$pi_red)
K <- dim(pi_red)[2]
if (is.null(class_labels)) {
class_labels <- 1:K
}
class_labels <- 1:K
colnames(pi_red) <- class_labels
pi_red_plot <- pi_red %>% tidyr::pivot_longer(cols = tidyselect::everything(),
names_to = "pi_comp", values_to = "value")
pi_comp <- value <- NULL
pi_red_plot %>% ggplot2::ggplot(ggplot2::aes(x = pi_comp,
y = value)) + ggplot2::theme_bw() + ggplot2::scale_fill_brewer(palette = "Set2") +
ggplot2::geom_boxplot() + ggplot2::labs(x = class_title,
y = y_title) + ggplot2::theme(text = ggplot2::element_text(size = 15),
axis.text.x = ggplot2::element_text(size = 12, color = "black"),
axis.text.y = ggplot2::element_text(size = 11, color = "black"),
axis.title.x = ggplot2::element_text(size = 13, color = "black",
face = "bold"), axis.title.y = ggplot2::element_text(size = 13,
color = "black", face = "bold"))
y_title = "Class Membership Probability"
class_title = "Dietary Pattern"
pi_red_plot %>% ggplot2::ggplot(ggplot2::aes(x = pi_comp,
y = value)) + ggplot2::theme_bw() + ggplot2::scale_fill_brewer(palette = "Set2") +
ggplot2::geom_boxplot() + ggplot2::labs(x = class_title,
y = y_title) + ggplot2::theme(text = ggplot2::element_text(size = 15),
axis.text.x = ggplot2::element_text(size = 12, color = "black"),
axis.text.y = ggplot2::element_text(size = 11, color = "black"),
axis.title.x = ggplot2::element_text(size = 13, color = "black",
face = "bold"), axis.title.y = ggplot2::element_text(size = 13,
color = "black", face = "bold"))
